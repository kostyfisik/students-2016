import copy
class SudokuSolver:
    def solve( A ):
        solution = copy.deepcopy( A )
        if SudokuSolver.solveHelper( solution ):
            return solution
        return None
    def solveHelper( solution ):
        minPossibleValueCountCell = None
        while True:
            minPossibleValueCountCell = None
            for X in range( 9 ):
                for Y in range( 9 ):
                    if solution[ X ][ Y ] != 0:
                        continue
                    possibleValues = SudokuSolver.findPossibleValues( X, Y, solution )
                    possibleValueCount = len( possibleValues )
                    if possibleValueCount == 0:
                        return False
                    if possibleValueCount == 1:
                        solution[ X ][ Y ] = possibleValues.pop()
                    if not minPossibleValueCountCell or \
                       possibleValueCount < len( minPossibleValueCountCell[ 1 ] ):
                        minPossibleValueCountCell = ( ( X, Y ), possibleValues )
            if not minPossibleValueCountCell:
                return True
            elif 1 < len( minPossibleValueCountCell[ 1 ] ):
                break
        r, c = minPossibleValueCountCell[ 0 ]
        for v in minPossibleValueCountCell[ 1 ]:
            solutionCopy = copy.deepcopy( solution )
            solutionCopy[ r ][ c ] = v
            if SudokuSolver.solveHelper( solutionCopy ):
                for r in range( 9 ):
                    for c in range( 9 ):
                        solution[ r ][ c ] = solutionCopy[ r ][ c ]
                return True
        return False
    def findPossibleValues( X, Y, A ):
        values = { v for v in range( 1, 10 ) }
        values -= SudokuSolver.getRowValues( X, A )
        values -= SudokuSolver.getColumnValues( Y, A )
        values -= SudokuSolver.getBlockValues( X, Y, A )
        return values
    def getRowValues( X, A ):
        return set( A[ X ][ : ] )

    def getColumnValues( Y, A ):
        return { A[ r ][ Y ] for r in range( 9 ) }

    def getBlockValues( X, Y, A ):
        blockRowStart = 3 * ( X // 3 )
        blockColumnStart = 3 * ( Y // 3 )
        return {A[ blockRowStart + r ][ blockColumnStart + c ]
                for r in range( 3 )
                for c in range( 3 )}
def printA( A ):
    for row in A:
        print( row )
A = [[4,0,0, 8,0,0, 0,0,0],
     [0,0,7, 0,6,0, 0,0,5],
     [0,0,3, 0,0,0, 0,9,0],

     [0,0,4, 0,0,1, 0,0,7],
     [0,5,0, 0,0,8, 0,1,0],
     [2,0,0, 0,0,0, 3,0,0],

     [0,2,0, 0,0,0, 4,0,0],
     [9,0,0, 0,3,0, 6,0,0],
     [0,0,0, 0,0,7, 0,0,3]]
#A = [[ 0, 0, 0,  5, 0, 7,  0, 0, 0 ],
    # [ 0, 0, 2,  4, 0, 6,  3, 0, 0 ],
    # [ 0, 9, 0,  0, 1, 0,  0, 2, 0 ],
 
    # [ 2, 7, 0,  0, 0, 0,  0, 6, 8 ],
    # [ 0, 0, 3,  0, 0, 0,  1, 0, 0 ],
    # [ 1, 4, 0,  0, 0, 0,  0, 9, 3 ],

    # [ 0, 6, 0,  0, 4, 0,  0, 5, 0 ],
    # [ 0, 0, 9,  2, 0, 0,  0, 0, 0 ],
    # [ 0, 0, 0,  9, 0, 3,  0, 0, 0 ]]
printA( A )
print()
solution = SudokuSolver.solve( A )
if solution: printA( solution )
print()